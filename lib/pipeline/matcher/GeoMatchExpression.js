"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var GeoMatchExpression = module.exports = function (){

}, klass = GeoMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: expression_geo.h lines: 45-45
//         GeoQuery _query;

proto._query = undefined;


// File: expression_geo.h lines: 45-45
//         GeoQuery _query;

proto._query = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method GeoMatchExpression
 * @param
 *
 */
proto.GeoMatchExpression = function GeoMatchExpression( /*  GEO  */ ){
// File: expression_geo.h lines: 31-30
//         GeoMatchExpression() : LeafMatchExpression( GEO ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( /*  StringBuilder& debug, int level  */ ){

// File: expression_geo.cpp lines: 44-52
//     void GeoMatchExpression::debugString( StringBuilder& debug, int level ) const {
//         _debugAddSpace( debug, level );
//         debug << "GEO";
//         MatchExpression::TagData* td = getTag();
//         if (NULL != td) {
//             debug << " ";
//             td->debugString(&debug);
//         }
//         debug << "\n";
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( /*  const MatchExpression* other  */ ){

// File: expression_geo.cpp lines: 55-66
//     bool GeoMatchExpression::equivalent( const MatchExpression* other ) const {
//         if ( matchType() != other->matchType() )
//             return false;
// 
//         const GeoMatchExpression* realOther = static_cast<const GeoMatchExpression*>( other );
// 
//         if ( path() != realOther->path() )
//             return false;
// 
//         // TODO:
//         // return _query == realOther->_query;
//         return false;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method init
 * @param
 *
 */
proto.init = function init( /*  const StringData& path, const GeoQuery& query  */ ){

// File: expression_geo.cpp lines: 28-30
//     Status GeoMatchExpression::init( const StringData& path, const GeoQuery& query ) {
//         _query = query;
//         return initPath( path );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( /*  const BSONElement& e  */ ){

// File: expression_geo.cpp lines: 33-41
//     bool GeoMatchExpression::matchesSingleElement( const BSONElement& e ) const {
//         if ( !e.isABSONObj())
//             return false;
// 
//         GeometryContainer container;
//         if ( !container.parseFrom( e.Obj() ) )
//                 return false;
// 
//         return _query.satisfiesPredicate( container );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){

// File: expression_geo.cpp lines: 69-72
//     LeafMatchExpression* GeoMatchExpression::shallowClone() const {
//         GeoMatchExpression* next = new GeoMatchExpression();
//         next->init( path(), _query );
//         return next;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~GeoMatchExpression
 * @param
 *
 */
proto.~GeoMatchExpression = function ~GeoMatchExpression( /*  */ ){
// File: expression_geo.h lines: 32-31
//         virtual ~GeoMatchExpression(){}




}