"use strict"

MatchExpression = require('MatchExpression');

// Autogenerated by cport.py on 2013-09-17 14:37
var AtomicMatchExpression = module.exports = function AtomicMatchExpression(){
	this._matchType = 'ATOMIC';
}, klass = AtomicMatchExpression, base =  MatchExpression, proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});

/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( level ) { //  StringBuilder& debug, int level
// File: expression.cpp lines: 48-50
	return this._debugAddSpace( level ) + "$atomic\n";

};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( other ) { //  const MatchExpression* other
// File: expression.h lines: 198-199
	return other._matchType == 'ATOMIC';
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matches
 * @param
 *
 */
proto.matches = function matches( doc ) { //  const MatchableDocument* doc, MatchDetails* details = 0
// File: expression.h lines: 184-185
	return true;
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( e ) { //  const BSONElement& e
// File: expression.h lines: 188-189
	return true;
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression.h lines: 192-193
	return new AtomicMatchExpression();	
};
