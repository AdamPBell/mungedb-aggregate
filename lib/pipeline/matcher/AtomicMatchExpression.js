"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var AtomicMatchExpression = module.exports = function (){

}, klass = AtomicMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method AtomicMatchExpression
 * @param
 *
 */
proto.AtomicMatchExpression = function AtomicMatchExpression( /*  ATOMIC  */ ){
// File: expression.h lines: 182-181
//         AtomicMatchExpression() : MatchExpression( ATOMIC ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( /*  StringBuilder& debug, int level  */ ){

// File: expression.cpp lines: 48-50
//     void AtomicMatchExpression::debugString( StringBuilder& debug, int level ) const {
//         _debugAddSpace( debug, level );
//         debug << "$atomic\n";
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( /*  const MatchExpression* other  */ ){
// File: expression.h lines: 198-199
//         virtual bool equivalent( const MatchExpression* other ) const {
//             return other->matchType() == ATOMIC;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matches
 * @param
 *
 */
proto.matches = function matches( /*  const MatchableDocument* doc, MatchDetails* details = 0  */ ){
// File: expression.h lines: 184-185
//         virtual bool matches( const MatchableDocument* doc, MatchDetails* details = 0 ) const {
//             return true;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( /*  const BSONElement& e  */ ){
// File: expression.h lines: 188-189
//         virtual bool matchesSingleElement( const BSONElement& e ) const {
//             return true;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression.h lines: 192-193
//         virtual MatchExpression* shallowClone() const {
//             return new AtomicMatchExpression();
//         }




}