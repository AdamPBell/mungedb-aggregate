"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var IndexKeyMatchableDocument = module.exports = function (){

}, klass = IndexKeyMatchableDocument, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: matcher.cpp lines: 52-52
//         BSONObj _doc;

proto._doc = undefined;


// File: matcher.cpp lines: 51-51
//         BSONObj _pattern;

proto._pattern = undefined;


// File: matcher.cpp lines: 52-52
//         BSONObj _doc;

proto._doc = undefined;


// File: matcher.cpp lines: 51-51
//         BSONObj _pattern;

proto._pattern = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method IndexKeyMatchableDocument
 * @param
 *
 */
proto.IndexKeyMatchableDocument = function IndexKeyMatchableDocument( /*  const BSONObj& pattern,$/;" */ ){

// File: matcher.cpp lines: 34-36
//         IndexKeyMatchableDocument( const BSONObj& pattern,
//                                    const BSONObj& doc )
//             : _pattern( pattern ), _doc( doc ) {
//         }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method _getElement
 * @param
 *
 */
proto._getElement = function _getElement( /*  const FieldRef& path  */ ){

// File: matcher.cpp lines: 63-77
//     BSONElement IndexKeyMatchableDocument::_getElement( const FieldRef& path ) const {
//         BSONObjIterator patternIterator( _pattern );
//         BSONObjIterator docIterator( _doc );
// 
//         while ( patternIterator.more() ) {
//             BSONElement patternElement = patternIterator.next();
//             verify( docIterator.more() );
//             BSONElement docElement = docIterator.next();
// 
//             if ( path.equalsDottedField( patternElement.fieldName() ) ) {
//                 return docElement;
//             }
//         }
// 
//         return BSONElement();
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getIterator
 * @param
 *
 */
proto.getIterator = function getIterator( /*  const ElementPath& path  */ ){

// File: matcher.cpp lines: 55-59
//     ElementIterator* IndexKeyMatchableDocument::getIterator( const ElementPath& path ) const {
//         BSONElement e = _getElement( path.fieldRef() );
//         if ( e.type() == Array )
//             return new SimpleArrayElementIterator( e, true );
//         return new SingleElementElementIterator( e );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method toBSON
 * @param
 *
 */
proto.toBSON = function toBSON( /*  */ ){

// File: matcher.cpp lines: 39-42
//         BSONObj toBSON() const {
//             // TODO: this isn't quite correct because of dots
//             // don't think it'll ever be called though
//             return _doc.replaceFieldNames( _pattern );
//         }



}