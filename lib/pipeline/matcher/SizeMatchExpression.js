"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var SizeMatchExpression = module.exports = function (){

}, klass = SizeMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: expression_array.h lines: 131-131
//         int _size; // >= 0 real, < 0, nothing will match

proto._size = undefined;


// File: expression_array.h lines: 131-131
//         int _size; // >= 0 real, < 0, nothing will match

proto._size = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method SizeMatchExpression
 * @param
 *
 */
proto.SizeMatchExpression = function SizeMatchExpression( /*  SIZE  */ ){
// File: expression_array.h lines: 113-112
//         SizeMatchExpression() : ArrayMatchingMatchExpression( SIZE ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( /*  StringBuilder& debug, int level  */ ){

// File: expression_array.cpp lines: 259-261
//     void SizeMatchExpression::debugString( StringBuilder& debug, int level ) const {
//         _debugAddSpace( debug, level );
//         debug << path() << " $size : " << _size << "\n";
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( /*  const MatchExpression* other  */ ){

// File: expression_array.cpp lines: 264-269
//     bool SizeMatchExpression::equivalent( const MatchExpression* other ) const {
//         if ( matchType() != other->matchType() )
//             return false;
// 
//         const SizeMatchExpression* realOther = static_cast<const SizeMatchExpression*>( other );
//         return path() == realOther->path() && _size == realOther->_size;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getData
 * @param
 *
 */
proto.getData = function getData( /*  */ ){
// File: expression_array.h lines: 128-127
//         int getData() const { return _size; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method init
 * @param
 *
 */
proto.init = function init( /*  const StringData& path, int size  */ ){

// File: expression_array.cpp lines: 248-250
//     Status SizeMatchExpression::init( const StringData& path, int size ) {
//         _size = size;
//         return initPath( path );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesArray
 * @param
 *
 */
proto.matchesArray = function matchesArray( /*  const BSONObj& anArray, MatchDetails* details  */ ){

// File: expression_array.cpp lines: 253-256
//     bool SizeMatchExpression::matchesArray( const BSONObj& anArray, MatchDetails* details ) const {
//         if ( _size < 0 )
//             return false;
//         return anArray.nFields() == _size;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression_array.h lines: 116-119
//         virtual SizeMatchExpression* shallowClone() const {
//             SizeMatchExpression* e = new SizeMatchExpression();
//             e->init(path(), _size);
//             return e;
//         }




}