"use strict";
var MatchExpression = require('./MatchExpression');


// Autogenerated by cport.py on 2013-09-17 14:37
var FalseMatchExpression = module.exports = function FalseMatchExpression(){
	base.call(this);
	this._matchType = 'ALWAYS_FALSE';
}, klass = FalseMatchExpression, base =  MatchExpression, proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});

/**
 *
 * Writes a debug string for this object
 * @method debugString
 * @param level
 *
 */
proto.debugString = function debugString(level) {
	// File: expression.cpp lines: 53-55
	return this._debugAddSpace( level ) + "$false\n";
};

/**
 *
 * checks if this expression is == to the other
 * @method equivalent
 * @param other
 *
 */
proto.equivalent = function equivalent(other) {
	// File: expression.h lines: 222-223
	return other._matchType === 'ALWAYS_FALSE';
};

/**
 *
 * matches checks the input doc against the internal element path to see if it is a match
 * @method matches
 * @param doc
 * @param details
 *
 */
proto.matches = function matches(doc,details) {
	// File: expression.h lines: 208-209
	return false;
};

/**
 *
 * Check if the input element matches
 * @method matchesSingleElement
 * @param e
 *
 */
proto.matchesSingleElement = function matchesSingleElement(e) {
	// File: expression.h lines: 212-213
	return false;
};

/**
 *
 * clone this instance to a new one
 * @method shallowClone
 *
 */
proto.shallowClone = function shallowClone(){
	// File: expression.h lines: 216-217
	return new FalseMatchExpression();
};

