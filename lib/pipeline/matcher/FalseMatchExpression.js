"use strict";

var MatchExpression = require('./MatchExpression');


// Autogenerated by cport.py on 2013-09-17 14:37
var FalseMatchExpression = module.exports = function FalseMatchExpression(){
	base.call(this);
	this._matchType = 'ALWAYS_FALSE';
}, klass = FalseMatchExpression, base =  MatchExpression, proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});

/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( level ) { //  StringBuilder& debug, int level
// File: expression.cpp lines: 53-55
	return this._debugAddSpace( level ) + "$false\n";
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( other ) { //  const MatchExpression* other
// File: expression.h lines: 222-223
	return other._matchType = 'ALWAYS_FALSE';
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matches
 * @param
 *
 */
proto.matches = function matches( doc,details ) { //  const MatchableDocument* doc, MatchDetails* details = 0
// File: expression.h lines: 208-209
	return false;
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( e ) { //  const BSONElement& e
// File: expression.h lines: 212-213
	return false;
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression.h lines: 216-217
	return new FalseMatchExpression();
};

