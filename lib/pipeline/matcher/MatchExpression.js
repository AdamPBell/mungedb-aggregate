"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var MatchExpression = module.exports = function (){

}, klass = MatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: expression.h lines: 172-172
//         MatchType _matchType;

proto._matchType = undefined;


// File: expression.h lines: 173-173
//         boost::scoped_ptr<TagData> _tagData;

proto._tagData = undefined;


// File: expression.h lines: 172-172
//         MatchType _matchType;

proto._matchType = undefined;


// File: expression.h lines: 173-173
//         boost::scoped_ptr<TagData> _tagData;

proto._tagData = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method MatchExpression
 * @param
 *
 */
proto.MatchExpression = function MatchExpression( /*  MatchType type  */ ){

// File: expression.cpp lines: 28-28
//     MatchExpression::MatchExpression( MatchType type )
//         : _matchType( type ) { }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method _debugAddSpace
 * @param
 *
 */
proto._debugAddSpace = function _debugAddSpace( /*  StringBuilder& debug, int level  */ ){

// File: expression.cpp lines: 37-39
//     void MatchExpression::_debugAddSpace( StringBuilder& debug, int level ) const {
//         for ( int i = 0; i < level; i++ )
//             debug << "    ";
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getChild
 * @param
 *
 */
proto.getChild = function getChild( /*  size_t i  */ ){
// File: expression.h lines: 78-77
//         virtual const MatchExpression* getChild( size_t i ) const { return NULL; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getTag
 * @param
 *
 */
proto.getTag = function getTag( /*  */ ){
// File: expression.h lines: 159-158
//         TagData* getTag() const { return _tagData.get(); }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method isArray
 * @param
 *
 */
proto.isArray = function isArray( /*  */ ){
// File: expression.h lines: 111-113
//         bool isArray() const {
//             return SIZE == _matchType || ALL == _matchType || ELEM_MATCH_VALUE == _matchType
//                    || ELEM_MATCH_OBJECT == _matchType;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method isLeaf
 * @param
 *
 */
proto.isLeaf = function isLeaf( /*  */ ){
// File: expression.h lines: 124-125
//         bool isLeaf() const {
//             return !isArray() && !isLogical();
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method isLogical
 * @param
 *
 */
proto.isLogical = function isLogical( /*  */ ){
// File: expression.h lines: 100-101
//         bool isLogical() const {
//             return AND == _matchType || OR == _matchType || NOT == _matchType || NOR == _matchType;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchType
 * @param
 *
 */
proto.matchType = function matchType( /*  */ ){
// File: expression.h lines: 67-66
//         MatchType matchType() const { return _matchType; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesBSON
 * @param
 *
 */
proto.matchesBSON = function matchesBSON( /*  const BSONObj& doc, MatchDetails* details  */ ){

// File: expression.cpp lines: 42-44
//     bool MatchExpression::matchesBSON( const BSONObj& doc, MatchDetails* details ) const {
//         BSONMatchableDocument mydoc( doc );
//         return matches( &mydoc, details );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method numChildren
 * @param
 *
 */
proto.numChildren = function numChildren( /*  */ ){
// File: expression.h lines: 73-72
//         virtual size_t numChildren() const { return 0; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method path
 * @param
 *
 */
proto.path = function path( /*  */ ){
// File: expression.h lines: 83-82
//         virtual const StringData path() const { return StringData(); }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method setTag
 * @param
 *
 */
proto.setTag = function setTag( /* TagData* data */ ){
// File: expression.h lines: 158-157
//         void setTag(TagData* data) { _tagData.reset(data); }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method toString
 * @param
 *
 */
proto.toString = function toString( /*  */ ){

// File: expression.cpp lines: 31-34
//     string MatchExpression::toString() const {
//         StringBuilder buf;
//         debugString( buf, 0 );
//         return buf.str();
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~MatchExpression
 * @param
 *
 */
proto.~MatchExpression = function ~MatchExpression( /*  */ ){
// File: expression.h lines: 58-57
//         virtual ~MatchExpression(){}




}