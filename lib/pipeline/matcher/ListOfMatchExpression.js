"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var ListOfMatchExpression = module.exports = function (){

}, klass = ListOfMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: expression_tree.h lines: 56-56
//         std::vector< MatchExpression* > _expressions;

proto._expressions = undefined;


// File: expression_tree.h lines: 56-56
//         std::vector< MatchExpression* > _expressions;

proto._expressions = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ListOfMatchExpression
 * @param
 *
 */
proto.ListOfMatchExpression = function ListOfMatchExpression( /*  MatchType type  */ ){
// File: expression_tree.h lines: 33-32
//         ListOfMatchExpression( MatchType type ) : MatchExpression( type ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method _debugList
 * @param
 *
 */
proto._debugList = function _debugList( /*  StringBuilder& debug, int level  */ ){

// File: expression_tree.cpp lines: 40-42
//     void ListOfMatchExpression::_debugList( StringBuilder& debug, int level ) const {
//         for ( unsigned i = 0; i < _expressions.size(); i++ )
//             _expressions[i]->debugString( debug, level + 1 );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method add
 * @param
 *
 */
proto.add = function add( /*  MatchExpression* e  */ ){

// File: expression_tree.cpp lines: 34-36
//     void ListOfMatchExpression::add( MatchExpression* e ) {
//         verify( e );
//         _expressions.push_back( e );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method clearAndRelease
 * @param
 *
 */
proto.clearAndRelease = function clearAndRelease( /*  */ ){
// File: expression_tree.h lines: 45-44
//         void clearAndRelease() { _expressions.clear(); }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( /*  const MatchExpression* other  */ ){

// File: expression_tree.cpp lines: 45-59
//     bool ListOfMatchExpression::equivalent( const MatchExpression* other ) const {
//         if ( matchType() != other->matchType() )
//             return false;
// 
//         const ListOfMatchExpression* realOther = static_cast<const ListOfMatchExpression*>( other );
// 
//         if ( _expressions.size() != realOther->_expressions.size() )
//             return false;
// 
//         // TOOD: order doesn't matter
//         for ( unsigned i = 0; i < _expressions.size(); i++ )
//             if ( !_expressions[i]->equivalent( realOther->_expressions[i] ) )
//                 return false;
// 
//         return true;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getChild
 * @param
 *
 */
proto.getChild = function getChild( /*  size_t i  */ ){
// File: expression_tree.h lines: 48-47
//         virtual const MatchExpression* getChild( size_t i ) const { return _expressions[i]; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method numChildren
 * @param
 *
 */
proto.numChildren = function numChildren( /*  */ ){
// File: expression_tree.h lines: 47-46
//         virtual size_t numChildren() const { return _expressions.size(); }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~ListOfMatchExpression
 * @param
 *
 */
proto.~ListOfMatchExpression = function ~ListOfMatchExpression( /*  */ ){

// File: expression_tree.cpp lines: 28-31
//     ListOfMatchExpression::~ListOfMatchExpression() {
//         for ( unsigned i = 0; i < _expressions.size(); i++ )
//             delete _expressions[i];
//         _expressions.clear();
//     }



}