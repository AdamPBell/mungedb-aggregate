"use strict";

var MatchExpression = require('./MatchExpression');

// Autogenerated by cport.py on 2013-09-17 14:37
var NotMatchExpression = module.exports = function NotMatchExpression(){
	base.call(this);
	this._matchType = 'NOT';
}, klass = NotMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: expression_tree.h lines: 152-152
//         boost::scoped_ptr<MatchExpression> _exp;

proto._exp = undefined;

/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( level ) { //  StringBuilder& debug, int level
// File: expression_tree.cpp lines: 146-149
	return this._debugAddSpace( level ) + "$not\n" + this._exp._debugString( level + 1 );
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( other ) { //  const MatchExpression* other 
// File: expression_tree.cpp lines: 152-156
	return other._matchType == 'NOT' && this._exp.equivalent(other.getChild(0));
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getChild
 * @param
 *
 */
proto.getChild = function getChild( i ) { //  size_t i
// File: expression_tree.h lines: 148-147
//         virtual MatchExpression* getChild( size_t i ) const { return _exp.get(); }
	return this._exp;
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method init
 * @param
 *
 */
proto.init = function init( exp ) { //  MatchExpression* exp 
// File: expression_tree.h lines: 123-125
	this._exp = exp;
	return {'code':'OK'};
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matches
 * @param
 *
 */
proto.matches = function matches( doc,details ) { //  const MatchableDocument* doc, MatchDetails* details = 0
// File: expression_tree.h lines: 135-136
	return ! this._exp.matches( doc,null );
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( e ) { //  const BSONElement& e
// File: expression_tree.h lines: 139-140
	return ! this._exp.matchesSingleElement( e );
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method numChildren
 * @param
 *
 */
proto.numChildren = function numChildren( /*  */ ){
// File: expression_tree.h lines: 147-146
	return 1;
};


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression_tree.h lines: 128-132
	var e = new NotMatchExpression();
	e.init(this._exp.shallowClone());
	return e;
};

