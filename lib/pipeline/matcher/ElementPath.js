"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var ElementPath = module.exports = function (){

}, klass = ElementPath, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: path.h lines: 41-41
//         FieldRef _fieldRef;

proto._fieldRef = undefined;


// File: path.h lines: 42-42
//         bool _shouldTraverseLeafArray;

proto._shouldTraverseLeafArray = undefined;


// File: path.h lines: 41-41
//         FieldRef _fieldRef;

proto._fieldRef = undefined;


// File: path.h lines: 42-42
//         bool _shouldTraverseLeafArray;

proto._shouldTraverseLeafArray = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method fieldRef
 * @param
 *
 */
proto.fieldRef = function fieldRef( /*  */ ){
// File: path.h lines: 37-36
//         const FieldRef& fieldRef() const { return _fieldRef; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method init
 * @param
 *
 */
proto.init = function init( /*  const StringData& path  */ ){

// File: path.cpp lines: 26-29
//     Status ElementPath::init( const StringData& path ) {
//         _shouldTraverseLeafArray = true;
//         _fieldRef.parse( path );
//         return Status::OK();
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method setTraverseLeafArray
 * @param
 *
 */
proto.setTraverseLeafArray = function setTraverseLeafArray( /*  bool b  */ ){
// File: path.h lines: 35-34
//         void setTraverseLeafArray( bool b ) { _shouldTraverseLeafArray = b; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shouldTraverseLeafArray
 * @param
 *
 */
proto.shouldTraverseLeafArray = function shouldTraverseLeafArray( /*  */ ){
// File: path.h lines: 38-37
//         bool shouldTraverseLeafArray() const { return _shouldTraverseLeafArray; }




}