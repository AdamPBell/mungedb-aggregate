"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var GeoNearMatchExpression = module.exports = function (){

}, klass = GeoNearMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: expression_geo.h lines: 66-66
//         NearQuery _query;

proto._query = undefined;


// File: expression_geo.h lines: 66-66
//         NearQuery _query;

proto._query = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method GeoNearMatchExpression
 * @param
 *
 */
proto.GeoNearMatchExpression = function GeoNearMatchExpression( /*  GEO_NEAR  */ ){
// File: expression_geo.h lines: 50-49
//         GeoNearMatchExpression() : LeafMatchExpression( GEO_NEAR ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( /*  StringBuilder& debug, int level  */ ){

// File: expression_geo.cpp lines: 90-98
//     void GeoNearMatchExpression::debugString( StringBuilder& debug, int level ) const {
//         _debugAddSpace( debug, level );
//         debug << "GEONEAR";
//         MatchExpression::TagData* td = getTag();
//         if (NULL != td) {
//             debug << " ";
//             td->debugString(&debug);
//         }
//         debug << "\n";
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method equivalent
 * @param
 *
 */
proto.equivalent = function equivalent( /*  const MatchExpression* other  */ ){

// File: expression_geo.cpp lines: 101-112
//     bool GeoNearMatchExpression::equivalent( const MatchExpression* other ) const {
//         if ( matchType() != other->matchType() )
//             return false;
// 
//         const GeoNearMatchExpression* realOther = static_cast<const GeoNearMatchExpression*>(other);
// 
//         if ( path() != realOther->path() )
//             return false;
// 
//         // TODO:
//         // return _query == realOther->_query;
//         return false;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method getData
 * @param
 *
 */
proto.getData = function getData( /*  */ ){
// File: expression_geo.h lines: 64-63
//         const NearQuery& getData() const { return _query; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method init
 * @param
 *
 */
proto.init = function init( /*  const StringData& path, const NearQuery& query  */ ){

// File: expression_geo.cpp lines: 79-81
//     Status GeoNearMatchExpression::init( const StringData& path, const NearQuery& query ) {
//         _query = query;
//         return initPath( path );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( /*  const BSONElement& e  */ ){

// File: expression_geo.cpp lines: 84-87
//     bool GeoNearMatchExpression::matchesSingleElement( const BSONElement& e ) const {
//         // This shouldn't be called.
//         verify(0);
//         return false;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){

// File: expression_geo.cpp lines: 115-118
//     LeafMatchExpression* GeoNearMatchExpression::shallowClone() const {
//         GeoNearMatchExpression* next = new GeoNearMatchExpression();
//         next->init( path(), _query );
//         return next;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~GeoNearMatchExpression
 * @param
 *
 */
proto.~GeoNearMatchExpression = function ~GeoNearMatchExpression( /*  */ ){
// File: expression_geo.h lines: 51-50
//         virtual ~GeoNearMatchExpression(){}




}