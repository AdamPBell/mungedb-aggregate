"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var AndMatchExpression = module.exports = function (){

}, klass = AndMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method AndMatchExpression
 * @param
 *
 */
proto.AndMatchExpression = function AndMatchExpression( /*  AND  */ ){
// File: expression_tree.h lines: 61-60
//         AndMatchExpression() : ListOfMatchExpression( AND ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( /*  StringBuilder& debug, int level  */ ){

// File: expression_tree.cpp lines: 85-88
//     void AndMatchExpression::debugString( StringBuilder& debug, int level ) const {
//         _debugAddSpace( debug, level );
//         debug << "$and\n";
//         _debugList( debug, level );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matches
 * @param
 *
 */
proto.matches = function matches( /*  const MatchableDocument* doc, MatchDetails* details  */ ){

// File: expression_tree.cpp lines: 64-72
//     bool AndMatchExpression::matches( const MatchableDocument* doc, MatchDetails* details ) const {
//         for ( size_t i = 0; i < numChildren(); i++ ) {
//             if ( !getChild(i)->matches( doc, details ) ) {
//                 if ( details )
//                     details->resetOutput();
//                 return false;
//             }
//         }
//         return true;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( /*  const BSONElement& e  */ ){

// File: expression_tree.cpp lines: 75-81
//     bool AndMatchExpression::matchesSingleElement( const BSONElement& e ) const {
//         for ( size_t i = 0; i < numChildren(); i++ ) {
//             if ( !getChild(i)->matchesSingleElement( e ) ) {
//                 return false;
//             }
//         }
//         return true;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression_tree.h lines: 67-72
//         virtual MatchExpression* shallowClone() const {
//             AndMatchExpression* self = new AndMatchExpression();
//             for (size_t i = 0; i < numChildren(); ++i) {
//                 self->add(getChild(i)->shallowClone());
//             }
//             return self;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~AndMatchExpression
 * @param
 *
 */
proto.~AndMatchExpression = function ~AndMatchExpression( /*  */ ){
// File: expression_tree.h lines: 62-61
//         virtual ~AndMatchExpression(){}




}