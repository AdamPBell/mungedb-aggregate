"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var NorMatchExpression = module.exports = function (){

}, klass = NorMatchExpression, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method NorMatchExpression
 * @param
 *
 */
proto.NorMatchExpression = function NorMatchExpression( /*  NOR  */ ){
// File: expression_tree.h lines: 99-98
//         NorMatchExpression() : ListOfMatchExpression( NOR ){}




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method debugString
 * @param
 *
 */
proto.debugString = function debugString( /*  StringBuilder& debug, int level  */ ){

// File: expression_tree.cpp lines: 138-141
//     void NorMatchExpression::debugString( StringBuilder& debug, int level ) const {
//         _debugAddSpace( debug, level );
//         debug << "$nor\n";
//         _debugList( debug, level );
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matches
 * @param
 *
 */
proto.matches = function matches( /*  const MatchableDocument* doc, MatchDetails* details  */ ){

// File: expression_tree.cpp lines: 120-126
//     bool NorMatchExpression::matches( const MatchableDocument* doc, MatchDetails* details ) const {
//         for ( size_t i = 0; i < numChildren(); i++ ) {
//             if ( getChild(i)->matches( doc, NULL ) ) {
//                 return false;
//             }
//         }
//         return true;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method matchesSingleElement
 * @param
 *
 */
proto.matchesSingleElement = function matchesSingleElement( /*  const BSONElement& e  */ ){

// File: expression_tree.cpp lines: 129-135
//     bool NorMatchExpression::matchesSingleElement( const BSONElement& e ) const {
//         for ( size_t i = 0; i < numChildren(); i++ ) {
//             if ( getChild(i)->matchesSingleElement( e ) ) {
//                 return false;
//             }
//         }
//         return true;
//     }



}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method shallowClone
 * @param
 *
 */
proto.shallowClone = function shallowClone( /*  */ ){
// File: expression_tree.h lines: 105-110
//         virtual MatchExpression* shallowClone() const {
//             NorMatchExpression* self = new NorMatchExpression();
//             for (size_t i = 0; i < numChildren(); ++i) {
//                 self->add(getChild(i)->shallowClone());
//             }
//             return self;
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~NorMatchExpression
 * @param
 *
 */
proto.~NorMatchExpression = function ~NorMatchExpression( /*  */ ){
// File: expression_tree.h lines: 100-99
//         virtual ~NorMatchExpression(){}




}