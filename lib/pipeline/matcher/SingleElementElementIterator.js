"use strict"



// Autogenerated by cport.py on 2013-09-17 14:37
var SingleElementElementIterator = module.exports = function (){

}, klass = SingleElementElementIterator, base =  Object  , proto = klass.prototype = Object.create(base.prototype, {constructor:{value:klass}});


// File: path.h lines: 88-88
//         ElementIterator::Context _element;

proto._element = undefined;


// File: path.h lines: 87-87
//         bool _seen;

proto._seen = undefined;


// File: path.h lines: 88-88
//         ElementIterator::Context _element;

proto._element = undefined;


// File: path.h lines: 87-87
//         bool _seen;

proto._seen = undefined;





/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method SingleElementElementIterator
 * @param
 *
 */
proto.SingleElementElementIterator = function SingleElementElementIterator( /*  BSONElement e  */ ){
// File: path.h lines: 77-79
//         explicit SingleElementElementIterator( BSONElement e )
//             : _seen( false ) {
//             _element.reset( e, BSONElement(), false );
//         }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method more
 * @param
 *
 */
proto.more = function more( /*  */ ){
// File: path.h lines: 83-82
//         virtual bool more() { return !_seen; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method next
 * @param
 *
 */
proto.next = function next( /*  */ ){
// File: path.h lines: 84-83
//         virtual Context next() { _seen = true; return _element; }




}


/**
 * 
 * This documentation was automatically generated. Please update when you touch this function.
 * @method ~SingleElementElementIterator
 * @param
 *
 */
proto.~SingleElementElementIterator = function ~SingleElementElementIterator( /*  */ ){
// File: path.h lines: 81-80
//         virtual ~SingleElementElementIterator(){}




}